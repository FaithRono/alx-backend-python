name: CI Pipeline - Testing and Code Quality

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

jobs:
  lint:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-lint-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-lint-

    - name: Install linting dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy bandit safety
        cd messaging_app
        pip install -r requirements.txt

    - name: Run flake8 linting
      run: |
        cd messaging_app
        echo "Running flake8 linting..."
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --max-complexity=10 --max-line-length=127 --statistics --format=json --output-file=flake8-report.json --exit-zero
        
        # Check for critical errors that should fail the build
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
      continue-on-error: false

    - name: Run black code formatting check
      run: |
        cd messaging_app
        black --check --diff . || echo "Code formatting issues found"
      continue-on-error: true

    - name: Run isort import sorting check
      run: |
        cd messaging_app
        isort --check-only --diff . || echo "Import sorting issues found"
      continue-on-error: true

    - name: Run bandit security linting
      run: |
        cd messaging_app
        bandit -r . -f json -o bandit-report.json || echo "Security issues found"
      continue-on-error: true

    - name: Upload linting reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: linting-reports
        path: |
          messaging_app/flake8-report.json
          messaging_app/bandit-report.json

  test:
    name: Django Tests with MySQL
    runs-on: ubuntu-latest
    needs: lint
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: rootpassword123
          MYSQL_DATABASE: messaging_db_test
          MYSQL_USER: messaging_user
          MYSQL_PASSWORD: password123
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h localhost"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y default-libmysqlclient-dev gcc pkg-config

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        cd messaging_app
        pip install -r requirements.txt
        pip install pytest pytest-django pytest-cov pytest-html mysqlclient coverage

    - name: Wait for MySQL to be ready
      run: |
        for i in {30..0}; do
          if mysqladmin ping -h 127.0.0.1 -P 3306 -u root -prootpassword123 --silent; then
            echo "MySQL is ready!"
            break
          fi
          echo 'Waiting for MySQL to be ready...'
          sleep 2
        done
        if [ "$i" = 0 ]; then
          echo 'MySQL is still unavailable after 60 seconds'
          exit 1
        fi

    - name: Set up test database
      run: |
        mysql -h 127.0.0.1 -P 3306 -u root -prootpassword123 -e "CREATE DATABASE IF NOT EXISTS messaging_db_test CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;"
        mysql -h 127.0.0.1 -P 3306 -u root -prootpassword123 -e "GRANT ALL PRIVILEGES ON messaging_db_test.* TO 'messaging_user'@'%';"
        mysql -h 127.0.0.1 -P 3306 -u root -prootpassword123 -e "FLUSH PRIVILEGES;"

    - name: Run Django system checks
      working-directory: messaging_app
      env:
        DJANGO_SETTINGS_MODULE: messaging_app.settings
        DB_HOST: 127.0.0.1
        DB_PORT: 3306
        MYSQL_DB: messaging_db_test
        MYSQL_USER: messaging_user
        MYSQL_PASSWORD: password123
        SECRET_KEY: test-secret-key-for-ci-pipeline
        DEBUG: False
      run: |
        python manage.py check --deploy

    - name: Run Django migrations
      working-directory: messaging_app
      env:
        DJANGO_SETTINGS_MODULE: messaging_app.settings
        DB_HOST: 127.0.0.1
        DB_PORT: 3306
        MYSQL_DB: messaging_db_test
        MYSQL_USER: messaging_user
        MYSQL_PASSWORD: password123
        SECRET_KEY: test-secret-key-for-ci-pipeline
        DEBUG: False
      run: |
        python manage.py migrate --run-syncdb

    - name: Run Django tests
      working-directory: messaging_app
      env:
        DJANGO_SETTINGS_MODULE: messaging_app.settings
        DB_HOST: 127.0.0.1
        DB_PORT: 3306
        MYSQL_DB: messaging_db_test
        MYSQL_USER: messaging_user
        MYSQL_PASSWORD: password123
        SECRET_KEY: test-secret-key-for-ci-pipeline
        DEBUG: False
      run: |
        python manage.py test --verbosity=2 --keepdb

    - name: Run pytest with coverage
      working-directory: messaging_app
      env:
        DJANGO_SETTINGS_MODULE: messaging_app.settings
        DB_HOST: 127.0.0.1
        DB_PORT: 3306
        MYSQL_DB: messaging_db_test
        MYSQL_USER: messaging_user
        MYSQL_PASSWORD: password123
        SECRET_KEY: test-secret-key-for-ci-pipeline
        DEBUG: False
      run: |
        pytest --junitxml=test-results.xml \
               --cov=. \
               --cov-report=xml \
               --cov-report=html \
               --cov-report=term \
               --html=pytest-report.html \
               --self-contained-html \
               --tb=short

    - name: Generate coverage badge
      working-directory: messaging_app
      run: |
        pip install coverage-badge
        coverage-badge -o coverage.svg
      continue-on-error: true

    - name: Check coverage threshold
      working-directory: messaging_app
      run: |
        coverage report --fail-under=70
      continue-on-error: true

    - name: Upload test results and coverage reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-coverage-reports-python-${{ matrix.python-version }}
        path: |
          messaging_app/test-results.xml
          messaging_app/htmlcov/
          messaging_app/coverage.xml
          messaging_app/coverage.svg
          messaging_app/pytest-report.html
        retention-days: 30

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: matrix.python-version == '3.10'
      with:
        file: messaging_app/coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Comment PR with coverage
      if: github.event_name == 'pull_request' && matrix.python-version == '3.10'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          try {
            if (fs.existsSync('messaging_app/coverage.xml')) {
              const coverage = fs.readFileSync('messaging_app/coverage.xml', 'utf8');
              const match = coverage.match(/line-rate="([^"]+)"/);
              if (match) {
                const percentage = Math.round(parseFloat(match[1]) * 100);
                await github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: `## ðŸ“Š Code Coverage Report
                  
**Current coverage:** ${percentage}%

**Python version:** ${{ matrix.python-version }}

âœ… All tests passed successfully!

View detailed coverage report in the artifacts.`
                });
              }
            }
          } catch (error) {
            console.log('Could not post coverage comment:', error);
          }