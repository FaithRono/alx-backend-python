pipeline {
    agent any
    
    environment {
        PYTHON_VERSION = '3.10'
        VENV_NAME = 'venv'
        GITHUB_CREDENTIALS = credentials('github-credentials')
    }
    
    stages {
        stage('Checkout') {
            steps {
                echo 'Checking out code from GitHub...'
                git branch: 'master',
                    credentialsId: 'github-credentials',
                    url: 'https://github.com/your-username/alx-backend-python.git'
            }
        }
        
        stage('Setup Python Environment') {
            steps {
                echo 'Setting up Python virtual environment...'
                sh '''
                    python3 -m venv ${VENV_NAME}
                    . ${VENV_NAME}/bin/activate
                    pip3 install --upgrade pip
                    pip3 install -r messaging_app/requirements.txt
                '''
            }
        }
        
        stage('Install Dependencies') {
            steps {
                echo 'Installing project dependencies...'
                sh '''
                    . ${VENV_NAME}/bin/activate
                    cd messaging_app
                    pip3 install pytest pytest-django pytest-cov flake8
                '''
            }
        }
        
        stage('Run Tests') {
            steps {
                echo 'Running tests with pytest...'
                sh '''
                    . ${VENV_NAME}/bin/activate
                    cd messaging_app
                    export DJANGO_SETTINGS_MODULE=messaging_app.settings
                    python3 manage.py test --verbosity=2
                    pytest --junitxml=test-results.xml --cov=. --cov-report=xml --cov-report=html
                '''
            }
            post {
                always {
                    // Publish test results
                    publishTestResults testResultsPattern: 'messaging_app/test-results.xml'
                    
                    // Archive test reports
                    archiveArtifacts artifacts: 'messaging_app/htmlcov/**', fingerprint: true
                    archiveArtifacts artifacts: 'messaging_app/coverage.xml', fingerprint: true
                }
            }
        }
        
        stage('Lint Code') {
            steps {
                echo 'Running code linting with flake8...'
                sh '''
                    . ${VENV_NAME}/bin/activate
                    cd messaging_app
                    flake8 . --format=junit-xml --output-file=flake8-results.xml || true
                '''
            }
            post {
                always {
                    archiveArtifacts artifacts: 'messaging_app/flake8-results.xml', fingerprint: true
                }
            }
        }
        
        stage('Generate Report') {
            steps {
                echo 'Generating test and coverage reports...'
                sh '''
                    . ${VENV_NAME}/bin/activate
                    cd messaging_app
                    echo "Test Report Generated" > test-report.txt
                    echo "Coverage Report Generated" >> test-report.txt
                    echo "Build completed at $(date)" >> test-report.txt
                '''
            }
            post {
                always {
                    archiveArtifacts artifacts: 'messaging_app/test-report.txt', fingerprint: true
                }
            }
        }
    }
    
    post {
        always {
            echo 'Cleaning up workspace...'
            cleanWs()
        }
        success {
            echo 'Pipeline completed successfully! ✅'
        }
        failure {
            echo 'Pipeline failed! ❌'
        }
    }
}